(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/regenerator'), require('broker-factory')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/regenerator', 'broker-factory'], factory) :
    (global = global || self, factory(global.midiJsonParserBroker = {}, global._regeneratorRuntime, global.brokerFactory));
}(this, (function (exports, _regeneratorRuntime, brokerFactory) { 'use strict';

    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;

    var wrap = brokerFactory.createBroker({
      parseArrayBuffer: function parseArrayBuffer(_ref) {
        var call = _ref.call;
        return function _callee(arrayBuffer) {
          return _regeneratorRuntime.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", call('parse', {
                    arrayBuffer: arrayBuffer
                  }, [arrayBuffer]));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          });
        };
      }
    });
    var load = function load(url) {
      var worker = new Worker(url);
      return wrap(worker);
    };

    exports.load = load;
    exports.wrap = wrap;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
