{"ast":null,"code":"import * as Util from './Util';\n\nclass Note {\n  /**\n   * Convert JSON to Note object\n   * @param {object} json\n   * @static\n   * @returns {Note}\n   */\n  static fromJSON(json) {\n    var note = new Note(json.midi, json.time, json.duration, json.velocity);\n    return note;\n  }\n\n  constructor(midi, time, duration = 0, velocity = 1) {\n    /**\n     * The MIDI note number\n     * @type {Number}\n     */\n    if (Util.isNumber(midi)) {\n      this.midi = midi;\n    } else if (Util.isPitch(midi)) {\n      this.name = midi;\n    } else {\n      throw new Error('the midi value must either be in Pitch Notation (e.g. C#4) or a midi value');\n    }\n    /**\n     * The note on time in seconds\n     * @type {Number}\n     */\n\n\n    this.time = time;\n    /**\n     * The duration in seconds\n     * @type {Number}\n     */\n\n    this.duration = duration;\n    /**\n     * The velocity 0-1\n     * @type {Number}\n     */\n\n    this.velocity = velocity;\n  }\n  /**\n   * If the note is the same as the given note\n   * @param {String|Number} note\n   * @return {Boolean}\n   */\n\n\n  match(note) {\n    if (Util.isNumber(note)) {\n      return this.midi === note;\n    } else if (Util.isPitch(note)) {\n      return this.name.toLowerCase() === note.toLowerCase();\n    }\n  }\n  /**\n   * The note in Scientific Pitch Notation\n   * @type {String}\n   */\n\n\n  get name() {\n    return Util.midiToPitch(this.midi);\n  }\n\n  set name(name) {\n    this.midi = Util.pitchToMidi(name);\n  }\n  /**\n   * Alias for time\n   * @type {Number}\n   */\n\n\n  get noteOn() {\n    return this.time;\n  }\n\n  set noteOn(t) {\n    this.time = t;\n  }\n  /**\n   * The note off time\n   * @type {Number}\n   */\n\n\n  get noteOff() {\n    return this.time + this.duration;\n  }\n\n  set noteOff(time) {\n    this.duration = time - this.time;\n  }\n  /**\n   * Convert the note to JSON\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    return {\n      name: this.name,\n      midi: this.midi,\n      time: this.time,\n      velocity: this.velocity,\n      duration: this.duration\n    };\n  }\n\n}\n\nexport { Note };","map":null,"metadata":{},"sourceType":"module"}