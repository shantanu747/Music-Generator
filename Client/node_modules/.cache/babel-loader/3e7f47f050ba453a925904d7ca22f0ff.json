{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/oem/Desktop/Melody/song-generation/Client/src/components/modules/Generator.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n              background-color: #00A0EE;\\n              border: none;\\n              color: white;\\n              padding: 15px 32px;\\n              text-align: center;\\n              text-decoration: none;\\n              display: inline-block;\\n              font-size: 16px;\\n              margin: 4px 2px;\\n              cursor: pointer;\\n        \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from \"styled-components\";\nimport * as mv from '@magenta/music';\nimport * as core from '@magenta/music/node/core';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { saveAs } from 'file-saver';\nimport Async from \"react-async\";\nimport Main from \"./Main\";\nimport SongList from \"../utilities/SongList\"; // set vae temperature\n\nconst vae_temperature = 1.5;\nlet mSamples;\nlet MaxSongs = [];\nlet currentPlaying = null;\nlet First = true;\nexport default class Magenta extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      console.log(\"Got Model\", this.model);\n      console.log(\"Got player\", this.player);\n      this.model.initialize().then(() => {\n        // play with temperature passed in\n        //this.playVAE(vae_temperature);\n        console.log(\"Started Model\");\n      });\n    };\n\n    this.saveSequence = midiT => {\n      const midi = mv.sequenceProtoToMidi(midiT);\n      const file = new Blob([midi], {\n        type: 'audio/midi'\n      });\n      saveAs(file, 'blob.midi');\n    };\n\n    this.interpolateInput = () => {\n      if (this.state.ready) {\n        let M = this.state.allSongs;\n\n        if (M.length == 2) {\n          this.playInterpolation(M[0].file, M[1].file, vae_temperature);\n          console.log(\"2 Files\");\n        } else {\n          this.playInterpolation4(M[0].file, M[1].file, M[2].file, M[3].file, vae_temperature);\n          console.log(\"4 files\");\n        }\n      }\n    };\n\n    this.playInterpolation = (M1, M2, vae_temperature) => {\n      //Steps per Quarter parameterMachine pre\n      const m1 = mv.sequences.quantizeNoteSequence(M1, 4);\n      const m2 = mv.sequences.quantizeNoteSequence(M2, 4);\n      this.model.interpolate([m1, m2], 4, vae_temperature)\n      /*.then((sample) =>{\n         const concat = mv.sequences.concatenate(sample);\n          this.player.start(concat);*/\n      .then(sample => {\n        const concat = mv.sequences.concatenate(sample);\n        currentPlaying = concat;\n        this.saveSequence(concat);\n        this.player.start(concat);\n      });\n    };\n\n    this.playStop = () => {\n      if (currentPlaying != null) {\n        if (this.player.isPlaying()) {\n          this.player.stop();\n        } else {\n          this.player.start(currentPlaying);\n        }\n      }\n    };\n\n    this.playInterpolation4 = (M1, M2, M3, M4, vae_temperature) => {\n      //Steps per Quarter parameterMachine pre\n      const m1 = mv.sequences.quantizeNoteSequence(M1, 24);\n      const m2 = mv.sequences.quantizeNoteSequence(M2, 24);\n      const m3 = mv.sequences.quantizeNoteSequence(M3, 24);\n      const m4 = mv.sequences.quantizeNoteSequence(M4, 24);\n      this.model.interpolate([m1, m2, m3, m4], 4, vae_temperature)\n      /*.then((sample) =>{\n         const concat = mv.sequences.concatenate(sample);\n          this.player.start(concat);*/\n      .then(sample => {\n        const concat = mv.sequences.concatenate(sample);\n        currentPlaying = concat;\n        this.saveSequence(concat);\n        this.player.start(concat);\n      });\n    };\n\n    this.encodeMidi = f => {\n      //let newSong = new Blob([f], {type: 'audio/midi'});\n      let newSong = URL.createObjectURL(f);\n      return mv.urlToBlob(newSong);\n    };\n\n    this.checkpoint = 'https://storage.googleapis.com/magentadata/js/checkpoints/music_vae/mel_4bar_small_q2';\n    this.model = new mv.MusicVAE(this.checkpoint);\n    this.player = new core.Player();\n    this.state = {\n      allSongs: [],\n      ready: false\n    };\n    this.update = this.update.bind(this);\n    this.newSong = false; //Testing multiple files\n    // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n    // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n    // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n    // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n  }\n\n  update() {\n    this.setState({\n      allSongs: MaxSongs\n    });\n  }\n\n  handleChange(e) {\n    let Promises = [];\n    let FinalPromise = [];\n\n    if (e.target.files.length === 0) {\n      console.log(\"Need to have files chose\");\n      return;\n    }\n\n    let tempSongs = e.target.files;\n\n    if (tempSongs.length >= 2) {\n      MaxSongs = [];\n\n      for (let i = 0; i < tempSongs.length; i += 1) {\n        MaxSongs.push({\n          id: i,\n          name: tempSongs[i].name,\n          file: null\n        });\n        Promises.push(this.encodeMidi(tempSongs[i], i));\n      }\n\n      Promise.all(Promises).then(e => {\n        for (let i = 0; i < tempSongs.length; i += 1) {\n          FinalPromise.push(mv.blobToNoteSequence(e[i]));\n        }\n\n        Promise.all(FinalPromise).then(f => {\n          for (let i = 0; i < tempSongs.length; i += 1) {\n            MaxSongs[i] = {\n              id: i,\n              name: MaxSongs[i].name,\n              file: f[i]\n            };\n            this.setState({\n              allSongs: MaxSongs,\n              ready: true\n            });\n          } //this.playInterpolation(MaxSongs[0].file, MaxSongs[1].file, vae_temperature);\n\n        });\n      });\n    } // let filename = e.target.files[0];\n    // setTimeout(()=>{\n    //     console.log(this.encodeMidi(filename));\n    // }, 0);\n\n  }\n\n  render() {\n    const Button = styled.button(_templateObject());\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: \"file-uploader\",\n      action: \"/action_page.php\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"file-input\",\n      type: \"file\",\n      multiple: \"multiple\",\n      name: \"img\",\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(SongList, {\n      songs: this.state.allSongs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.interpolateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Generator\"), React.createElement(Button, {\n      onClick: this.playStop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Play / Stop\")));\n  }\n\n}","map":{"version":3,"sources":["/home/oem/Desktop/Melody/song-generation/Client/src/components/modules/Generator.js"],"names":["React","styled","mv","core","BrowserRouter","Router","Route","saveAs","Async","Main","SongList","vae_temperature","mSamples","MaxSongs","currentPlaying","First","Magenta","Component","constructor","props","componentDidMount","console","log","model","player","initialize","then","saveSequence","midiT","midi","sequenceProtoToMidi","file","Blob","type","interpolateInput","state","ready","M","allSongs","length","playInterpolation","playInterpolation4","M1","M2","m1","sequences","quantizeNoteSequence","m2","interpolate","sample","concat","concatenate","start","playStop","isPlaying","stop","M3","M4","m3","m4","encodeMidi","f","newSong","URL","createObjectURL","urlToBlob","checkpoint","MusicVAE","Player","update","bind","setState","handleChange","e","Promises","FinalPromise","target","files","tempSongs","i","push","id","name","Promise","all","blobToNoteSequence","render","Button","button"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\nimport * as mv from '@magenta/music';\nimport * as core from '@magenta/music/node/core';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {saveAs} from 'file-saver';\nimport Async from \"react-async\";\nimport Main from \"./Main\";\nimport SongList from \"../utilities/SongList\";\n    // set vae temperature\nconst vae_temperature = 1.5;\nlet mSamples;\nlet MaxSongs = []\nlet currentPlaying = null;\nlet First = true;\nexport default class Magenta extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkpoint = 'https://storage.googleapis.com/magentadata/js/checkpoints/music_vae/mel_4bar_small_q2';\n        this.model = new mv.MusicVAE(this.checkpoint);\n\n        this.player = new core.Player();\n        this.state = {\n            allSongs: [],\n            ready: false\n        };\n        this.update = this.update.bind(this);\n\n        this.newSong = false;\n        //Testing multiple files\n        // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n        // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n        // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n        // MaxSongs.push({\"song1\": new Blob([this.props.m1[1]], {type: 'audio/midi'})});\n    }\n    update(){\n        this.setState({allSongs: MaxSongs});\n\n    }\n\n    componentDidMount = () => {\n        console.log(\"Got Model\", this.model);\n        console.log(\"Got player\", this.player);\n        this.model\n            .initialize()\n            .then(() => {\n\n                // play with temperature passed in\n                //this.playVAE(vae_temperature);\n                console.log(\"Started Model\");\n            })\n\n    };\n    saveSequence = (midiT) =>{\n        const midi = mv.sequenceProtoToMidi(midiT);\n        const file = new Blob([midi], {type: 'audio/midi'});\n        saveAs(file, 'blob.midi');\n    };\n    interpolateInput = () =>{\n        if(this.state.ready){\n            let M = this.state.allSongs;\n            if(M.length == 2){\n                this.playInterpolation(M[0].file, M[1].file, vae_temperature);\n                console.log(\"2 Files\");\n            }else{\n                   this.playInterpolation4(M[0].file, M[1].file, M[2].file, M[3].file, vae_temperature);\n                   console.log(\"4 files\");\n            }\n        }\n    };\n    //Plays the interpolations between the\n    playInterpolation = (M1, M2, vae_temperature) =>{\n        //Steps per Quarter parameterMachine pre\n      const m1 = mv.sequences.quantizeNoteSequence(M1, 4);\n      const m2 = mv.sequences.quantizeNoteSequence(M2, 4);\n\n      this.model\n          .interpolate([m1, m2], 4, vae_temperature)\n          /*.then((sample) =>{\n             const concat = mv.sequences.concatenate(sample);\n              this.player.start(concat);*/\n          .then(sample =>{\n              const concat = mv.sequences.concatenate(sample);\n              currentPlaying = concat;\n              this.saveSequence(concat);\n              this.player.start(concat);\n        });\n    };\n    playStop = () =>{\n        if(currentPlaying != null) {\n            if (this.player.isPlaying()) {\n                this.player.stop();\n            } else {\n                this.player.start(currentPlaying);\n            }\n        }\n    };\n        //Plays the interpolations between the\n    playInterpolation4 = (M1, M2, M3, M4, vae_temperature) =>{\n        //Steps per Quarter parameterMachine pre\n      const m1 = mv.sequences.quantizeNoteSequence(M1, 24);\n      const m2 = mv.sequences.quantizeNoteSequence(M2, 24);\n      const m3 = mv.sequences.quantizeNoteSequence(M3, 24);\n      const m4 = mv.sequences.quantizeNoteSequence(M4, 24);\n\n      this.model\n          .interpolate([m1, m2, m3, m4], 4, vae_temperature)\n          /*.then((sample) =>{\n             const concat = mv.sequences.concatenate(sample);\n              this.player.start(concat);*/\n          .then(sample =>{\n              const concat = mv.sequences.concatenate(sample);\n              currentPlaying = concat;\n              this.saveSequence(concat);\n              this.player.start(concat);\n        });\n    };\n\n    encodeMidi =(f)=> {\n        //let newSong = new Blob([f], {type: 'audio/midi'});\n        let newSong = URL.createObjectURL(f);\n        return mv.urlToBlob(newSong);\n\n    };\n        handleChange(e){\n            let Promises = [];\n            let FinalPromise = [];\n            if(e.target.files.length === 0){\n                console.log(\"Need to have files chose\");\n                return;\n            }\n            let tempSongs = e.target.files;\n            if(tempSongs.length >= 2){\n                MaxSongs = [];\n                for(let i = 0; i < tempSongs.length; i+=1){\n                    MaxSongs.push({id: i, name: tempSongs[i].name, file: null});\n                    Promises.push(this.encodeMidi(tempSongs[i], i));\n\n                }\n                Promise.all(Promises).then( e => {\n                    for(let i = 0; i < tempSongs.length; i+=1) {\n                        FinalPromise.push(mv.blobToNoteSequence(e[i]));\n                    }\n                    Promise.all(FinalPromise).then(f => {\n                    for(let i = 0; i < tempSongs.length; i += 1){\n                        MaxSongs[i] = ({id: i, name: MaxSongs[i].name, file: f[i]});\n                        this.setState({allSongs: MaxSongs, ready: true});\n                    }\n                    //this.playInterpolation(MaxSongs[0].file, MaxSongs[1].file, vae_temperature);\n                });\n                });\n            }\n            // let filename = e.target.files[0];\n            // setTimeout(()=>{\n            //     console.log(this.encodeMidi(filename));\n            // }, 0);\n    };\n    render() {\n        const Button = styled.button`\n              background-color: #00A0EE;\n              border: none;\n              color: white;\n              padding: 15px 32px;\n              text-align: center;\n              text-decoration: none;\n              display: inline-block;\n              font-size: 16px;\n              margin: 4px 2px;\n              cursor: pointer;\n        `;\n        return (<div>\n                <div className={\"input\"}>\n                    <form id={\"file-uploader\"} action={\"/action_page.php\"}>\n                        <input id={\"file-input\"} type={\"file\"} multiple={\"multiple\"} name={\"img\"} onChange={this.handleChange.bind(this)} />\n                            </form>\n                    <SongList songs={this.state.allSongs}/>\n\n                    </div>\n                <div>\n                    <Button onClick={this.interpolateInput} >\n                    Generator\n                </Button>\n                <Button onClick={this.playStop}>\n                    Play / Stop\n                </Button>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}