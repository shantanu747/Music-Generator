{"ast":null,"code":"function hasMoreValues(arrays, positions) {\n  for (let i = 0; i < arrays.length; i++) {\n    let arr = arrays[i];\n    let pos = positions[i];\n\n    if (arr.length > pos) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getLowestAtPosition(arrays, positions, encoders) {\n  let lowestIndex = 0;\n  let lowestValue = Infinity;\n\n  for (let i = 0; i < arrays.length; i++) {\n    let arr = arrays[i];\n    let pos = positions[i];\n\n    if (arr[pos] && arr[pos].time < lowestValue) {\n      lowestIndex = i;\n      lowestValue = arr[pos].time;\n    }\n  }\n\n  encoders[lowestIndex](arrays[lowestIndex][positions[lowestIndex]]); // increment array\n\n  positions[lowestIndex] += 1;\n}\n/**\n * Combine multiple arrays keeping the timing in order\n * The arguments should alternate between the array and the encoder callback\n * @param {...Array|Function} args\n */\n\n\nfunction Merge(...args) {\n  const arrays = args.filter((v, i) => i % 2 === 0);\n  const positions = new Uint32Array(arrays.length);\n  const encoders = args.filter((v, i) => i % 2 === 1);\n  const output = [];\n\n  while (hasMoreValues(arrays, positions)) {\n    getLowestAtPosition(arrays, positions, encoders);\n  }\n}\n\nexport { Merge };","map":null,"metadata":{},"sourceType":"module"}