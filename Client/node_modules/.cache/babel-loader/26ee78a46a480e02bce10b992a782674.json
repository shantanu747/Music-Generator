{"ast":null,"code":"import _objectWithoutProperties from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _wrapNativeSuper from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/oem/Desktop/Melody/song-generation/Client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useRef, useReducer, useCallback, useDebugValue, useMemo } from 'react';\n/* istanbul ignore file */\n\n/**\n * Universal global scope object. In the browser this is `self`, in Node.js and React Native it's `global`.\n * This file is excluded from coverage reporting because these globals are environment-specific so we can't test them all.\n */\n\nvar globalScope = function () {\n  if (typeof self === \"object\" && self.self === self) return self;\n  if (typeof global === \"object\" && global.global === global) return global;\n  if (typeof global === \"object\" && global.GLOBAL === global) return global;\n  return {}; // fallback that relies on imported modules to be singletons\n}();\n/**\n * Globally available object used to connect the DevTools to all React Async instances.\n */\n\n\nglobalScope.__REACT_ASYNC__ = globalScope.__REACT_ASYNC__ || {};\n\nvar noop = function noop() {};\n\nvar MockAbortController = function MockAbortController() {\n  _classCallCheck(this, MockAbortController);\n\n  this.abort = noop;\n  this.signal = {};\n};\n\nvar PropTypes;\n\ntry {\n  PropTypes = require(\"prop-types\");\n} catch (e) {}\n\nvar childrenFn = PropTypes && PropTypes.oneOfType([PropTypes.node, PropTypes.func]);\nvar stateObject = PropTypes && PropTypes.shape({\n  initialValue: PropTypes.any,\n  data: PropTypes.any,\n  error: PropTypes.instanceOf(Error),\n  value: PropTypes.any,\n  startedAt: PropTypes.instanceOf(Date),\n  finishedAt: PropTypes.instanceOf(Date),\n  status: PropTypes.oneOf([\"initial\", \"pending\", \"fulfilled\", \"rejected\"]),\n  isInitial: PropTypes.bool,\n  isPending: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isFulfilled: PropTypes.bool,\n  isResolved: PropTypes.bool,\n  isRejected: PropTypes.bool,\n  isSettled: PropTypes.bool,\n  counter: PropTypes.number,\n  promise: PropTypes.instanceOf(Promise),\n  run: PropTypes.func,\n  reload: PropTypes.func,\n  cancel: PropTypes.func,\n  setData: PropTypes.func,\n  setError: PropTypes.func\n});\nvar propTypes = PropTypes && {\n  Async: {\n    children: childrenFn,\n    promise: PropTypes.instanceOf(Promise),\n    promiseFn: PropTypes.func,\n    deferFn: PropTypes.func,\n    watch: PropTypes.any,\n    watchFn: PropTypes.func,\n    initialValue: PropTypes.any,\n    onResolve: PropTypes.func,\n    onReject: PropTypes.func,\n    reducer: PropTypes.func,\n    dispatcher: PropTypes.func,\n    debugLabel: PropTypes.string,\n    suspense: PropTypes.bool\n  },\n  Initial: {\n    children: childrenFn,\n    state: stateObject.isRequired,\n    persist: PropTypes.bool\n  },\n  Pending: {\n    children: childrenFn,\n    state: stateObject.isRequired,\n    initial: PropTypes.bool\n  },\n  Fulfilled: {\n    children: childrenFn,\n    state: stateObject.isRequired,\n    persist: PropTypes.bool\n  },\n  Rejected: {\n    children: childrenFn,\n    state: stateObject.isRequired,\n    persist: PropTypes.bool\n  },\n  Settled: {\n    children: childrenFn,\n    state: stateObject.isRequired,\n    persist: PropTypes.bool\n  }\n};\n\nvar renderFn = function renderFn(children) {\n  if (typeof children === \"function\") {\n    var render = children;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return render.apply(void 0, args);\n  }\n\n  return children;\n};\n/**\n * Renders only when no promise has started or completed yet.\n *\n * @prop {Function|Node} children Function (passing state) or React node\n * @prop {Object} state React Async state object\n * @prop {boolean} persist Show until we have data, even while pending (loading) or when an error occurred\n */\n\n\nvar IfInitial = function IfInitial(_ref) {\n  var children = _ref.children,\n      persist = _ref.persist,\n      _ref$state = _ref.state,\n      state = _ref$state === void 0 ? {} : _ref$state;\n  return React.createElement(React.Fragment, null, state.isInitial || persist && !state.data ? renderFn(children, state) : null);\n};\n/**\n * Renders only while pending (promise is loading).\n *\n * @prop {Function|Node} children Function (passing state) or React node\n * @prop {Object} state React Async state object\n * @prop {boolean} initial Show only on initial load (data is undefined)\n */\n\n\nvar IfPending = function IfPending(_ref2) {\n  var children = _ref2.children,\n      initial = _ref2.initial,\n      _ref2$state = _ref2.state,\n      state = _ref2$state === void 0 ? {} : _ref2$state;\n  return React.createElement(React.Fragment, null, state.isPending && (!initial || !state.value) ? renderFn(children, state) : null);\n};\n/**\n * Renders only when promise is resolved.\n *\n * @prop {Function|Node} children Function (passing data and state) or React node\n * @prop {Object} state React Async state object\n * @prop {boolean} persist Show old data while pending (promise is loading)\n */\n\n\nvar IfFulfilled = function IfFulfilled(_ref3) {\n  var children = _ref3.children,\n      persist = _ref3.persist,\n      _ref3$state = _ref3.state,\n      state = _ref3$state === void 0 ? {} : _ref3$state;\n  return React.createElement(React.Fragment, null, state.isFulfilled || persist && state.data ? renderFn(children, state.data, state) : null);\n};\n/**\n * Renders only when promise is rejected.\n *\n * @prop {Function|Node} children Function (passing error and state) or React node\n * @prop {Object} state React Async state object\n * @prop {boolean} persist Show old error while pending (promise is loading)\n */\n\n\nvar IfRejected = function IfRejected(_ref4) {\n  var children = _ref4.children,\n      persist = _ref4.persist,\n      _ref4$state = _ref4.state,\n      state = _ref4$state === void 0 ? {} : _ref4$state;\n  return React.createElement(React.Fragment, null, state.isRejected || persist && state.error ? renderFn(children, state.error, state) : null);\n};\n/**\n * Renders only when promise is fulfilled or rejected.\n *\n * @prop {Function|Node} children Function (passing state) or React node\n * @prop {Object} state React Async state object\n * @prop {boolean} persist Show old data or error while pending (promise is loading)\n */\n\n\nvar IfSettled = function IfSettled(_ref5) {\n  var children = _ref5.children,\n      persist = _ref5.persist,\n      _ref5$state = _ref5.state,\n      state = _ref5$state === void 0 ? {} : _ref5$state;\n  return React.createElement(React.Fragment, null, state.isSettled || persist && state.value ? renderFn(children, state) : null);\n};\n\nif (propTypes) {\n  IfInitial.propTypes = propTypes.Initial;\n  IfPending.propTypes = propTypes.Pending;\n  IfFulfilled.propTypes = propTypes.Fulfilled;\n  IfRejected.propTypes = propTypes.Rejected;\n  IfSettled.propTypes = propTypes.Settled;\n}\n\nvar StatusTypes;\n\n(function (StatusTypes) {\n  StatusTypes[\"initial\"] = \"initial\";\n  StatusTypes[\"pending\"] = \"pending\";\n  StatusTypes[\"fulfilled\"] = \"fulfilled\";\n  StatusTypes[\"rejected\"] = \"rejected\";\n})(StatusTypes || (StatusTypes = {}));\n\nvar getInitialStatus = function getInitialStatus(value, promise) {\n  if (value instanceof Error) return StatusTypes.rejected;\n  if (value !== undefined) return StatusTypes.fulfilled;\n  if (promise) return StatusTypes.pending;\n  return StatusTypes.initial;\n};\n\nvar getIdleStatus = function getIdleStatus(value) {\n  if (value instanceof Error) return StatusTypes.rejected;\n  if (value !== undefined) return StatusTypes.fulfilled;\n  return StatusTypes.initial;\n};\n\nvar getStatusProps = function getStatusProps(status) {\n  return {\n    status: status,\n    isInitial: status === StatusTypes.initial,\n    isPending: status === StatusTypes.pending,\n    isLoading: status === StatusTypes.pending,\n    isFulfilled: status === StatusTypes.fulfilled,\n    isResolved: status === StatusTypes.fulfilled,\n    isRejected: status === StatusTypes.rejected,\n    isSettled: status === StatusTypes.fulfilled || status === StatusTypes.rejected\n  };\n}; // This exists to make sure we don't hold any references to user-provided functions\n// The way NeverSettle extends from Promise is complicated, but can't be done differently because Babel doesn't support\n// extending built-in classes. See https://babeljs.io/docs/en/caveats/#classes\n\n\nvar NeverSettle = function NeverSettle() {};\n/* istanbul ignore next */\n\n\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(NeverSettle, Promise);\n} else {\n  NeverSettle.__proto__ = Promise;\n}\n\nNeverSettle.prototype = Object.assign(Object.create(Promise.prototype), {\n  finally: function _finally() {\n    return this;\n  },\n  catch: function _catch() {\n    return this;\n  },\n  then: function then() {\n    return this;\n  }\n});\nvar neverSettle = new NeverSettle();\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"start\"] = \"start\";\n  ActionTypes[\"cancel\"] = \"cancel\";\n  ActionTypes[\"fulfill\"] = \"fulfill\";\n  ActionTypes[\"reject\"] = \"reject\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar init = function init(_ref6) {\n  var initialValue = _ref6.initialValue,\n      promise = _ref6.promise,\n      promiseFn = _ref6.promiseFn;\n  return _objectSpread({\n    initialValue: initialValue,\n    data: initialValue instanceof Error ? undefined : initialValue,\n    error: initialValue instanceof Error ? initialValue : undefined,\n    value: initialValue,\n    startedAt: promise || promiseFn ? new Date() : undefined,\n    finishedAt: initialValue ? new Date() : undefined\n  }, getStatusProps(getInitialStatus(initialValue, promise || promiseFn)), {\n    counter: 0,\n    promise: neverSettle\n  });\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case ActionTypes.start:\n      return _objectSpread({}, state, {\n        startedAt: new Date(),\n        finishedAt: undefined\n      }, getStatusProps(StatusTypes.pending), {\n        counter: action.meta.counter,\n        promise: action.meta.promise\n      });\n\n    case ActionTypes.cancel:\n      return _objectSpread({}, state, {\n        startedAt: undefined,\n        finishedAt: undefined\n      }, getStatusProps(getIdleStatus(state.error || state.data)), {\n        counter: action.meta.counter,\n        promise: action.meta.promise\n      });\n\n    case ActionTypes.fulfill:\n      return _objectSpread({}, state, {\n        data: action.payload,\n        value: action.payload,\n        error: undefined,\n        finishedAt: new Date()\n      }, getStatusProps(StatusTypes.fulfilled), {\n        promise: action.meta.promise\n      });\n\n    case ActionTypes.reject:\n      return _objectSpread({}, state, {\n        error: action.payload,\n        value: action.payload,\n        finishedAt: new Date()\n      }, getStatusProps(StatusTypes.rejected), {\n        promise: action.meta.promise\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar dispatchMiddleware = function dispatchMiddleware(dispatch) {\n  return function (action) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    dispatch.apply(void 0, [action].concat(args));\n\n    if (action.type === ActionTypes.start && typeof action.payload === \"function\") {\n      action.payload();\n    }\n  };\n};\n\nvar Async =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Async, _React$Component);\n\n  function Async() {\n    _classCallCheck(this, Async);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Async).apply(this, arguments));\n  }\n\n  return Async;\n}(React.Component);\n/**\n * createInstance allows you to create instances of Async that are bound to a specific promise.\n * A unique instance also uses its own React context for better nesting capability.\n */\n\n\nfunction createInstance() {\n  var defaultOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var displayName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Async\";\n\n  var _React$createContext = React.createContext(undefined),\n      UnguardedConsumer = _React$createContext.Consumer,\n      Provider = _React$createContext.Provider;\n\n  function Consumer(_ref7) {\n    var children = _ref7.children;\n    return React.createElement(UnguardedConsumer, null, function (value) {\n      if (!value) {\n        throw new Error(\"this component should only be used within an associated <Async> component!\");\n      }\n\n      return children(value);\n    });\n  }\n\n  var Async =\n  /*#__PURE__*/\n  function (_React$Component2) {\n    _inherits(Async, _React$Component2);\n\n    function Async(props) {\n      var _this;\n\n      _classCallCheck(this, Async);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Async).call(this, props));\n      _this.mounted = false;\n      _this.counter = 0;\n      _this.args = [];\n      _this.promise = neverSettle;\n      _this.abortController = new MockAbortController();\n      _this.start = _this.start.bind(_assertThisInitialized(_this));\n      _this.load = _this.load.bind(_assertThisInitialized(_this));\n      _this.run = _this.run.bind(_assertThisInitialized(_this));\n      _this.cancel = _this.cancel.bind(_assertThisInitialized(_this));\n      _this.onResolve = _this.onResolve.bind(_assertThisInitialized(_this));\n      _this.onReject = _this.onReject.bind(_assertThisInitialized(_this));\n      _this.setData = _this.setData.bind(_assertThisInitialized(_this));\n      _this.setError = _this.setError.bind(_assertThisInitialized(_this));\n      var promise = props.promise;\n      var promiseFn = props.promiseFn || defaultOptions.promiseFn;\n      var initialValue = props.initialValue || defaultOptions.initialValue;\n      _this.state = _objectSpread({}, init({\n        initialValue: initialValue,\n        promise: promise,\n        promiseFn: promiseFn\n      }), {\n        cancel: _this.cancel,\n        run: _this.run,\n        reload: function reload() {\n          var _this2;\n\n          _this.load();\n\n          (_this2 = _this).run.apply(_this2, _toConsumableArray(_this.args));\n        },\n        setData: _this.setData,\n        setError: _this.setError\n      });\n      _this.debugLabel = props.debugLabel || defaultOptions.debugLabel;\n      var devToolsDispatcher = globalScope.__REACT_ASYNC__.devToolsDispatcher;\n\n      var _reducer = props.reducer || defaultOptions.reducer;\n\n      var _dispatcher = props.dispatcher || defaultOptions.dispatcher || devToolsDispatcher;\n\n      var reducer$1 = _reducer ? function (state, action) {\n        return _reducer(state, action, reducer);\n      } : reducer;\n      var dispatch = dispatchMiddleware(function (action, callback) {\n        _this.setState(function (state) {\n          return reducer$1(state, action);\n        }, callback);\n      });\n      _this.dispatch = _dispatcher ? function (action) {\n        return _dispatcher(action, dispatch, props);\n      } : dispatch;\n      return _this;\n    }\n\n    _createClass(Async, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.mounted = true;\n\n        if (this.props.promise || !this.state.initialValue) {\n          this.load();\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var _this$props = this.props,\n            watch = _this$props.watch,\n            _this$props$watchFn = _this$props.watchFn,\n            watchFn = _this$props$watchFn === void 0 ? defaultOptions.watchFn : _this$props$watchFn,\n            promise = _this$props.promise,\n            promiseFn = _this$props.promiseFn;\n\n        if (watch !== prevProps.watch) {\n          if (this.counter) this.cancel();\n          return this.load();\n        }\n\n        if (watchFn && watchFn(_objectSpread({}, defaultOptions, {}, this.props), _objectSpread({}, defaultOptions, {}, prevProps))) {\n          if (this.counter) this.cancel();\n          return this.load();\n        }\n\n        if (promise !== prevProps.promise) {\n          if (this.counter) this.cancel();\n          if (promise) return this.load();\n        }\n\n        if (promiseFn !== prevProps.promiseFn) {\n          if (this.counter) this.cancel();\n          if (promiseFn) return this.load();\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.cancel();\n        this.mounted = false;\n      }\n    }, {\n      key: \"getMeta\",\n      value: function getMeta(meta) {\n        return _objectSpread({\n          counter: this.counter,\n          promise: this.promise,\n          debugLabel: this.debugLabel\n        }, meta);\n      }\n    }, {\n      key: \"start\",\n      value: function start(promiseFn) {\n        var _this3 = this;\n\n        if (\"AbortController\" in globalScope) {\n          this.abortController.abort();\n          this.abortController = new globalScope.AbortController();\n        }\n\n        this.counter++;\n        return this.promise = new Promise(function (resolve, reject) {\n          if (!_this3.mounted) return;\n\n          var executor = function executor() {\n            return promiseFn().then(resolve, reject);\n          };\n\n          _this3.dispatch({\n            type: ActionTypes.start,\n            payload: executor,\n            meta: _this3.getMeta()\n          });\n        });\n      }\n    }, {\n      key: \"load\",\n      value: function load() {\n        var _this4 = this;\n\n        var promise = this.props.promise;\n        var promiseFn = this.props.promiseFn || defaultOptions.promiseFn;\n\n        if (promise) {\n          this.start(function () {\n            return promise;\n          }).then(this.onResolve(this.counter)).catch(this.onReject(this.counter));\n        } else if (promiseFn) {\n          var props = _objectSpread({}, defaultOptions, {}, this.props);\n\n          this.start(function () {\n            return promiseFn(props, _this4.abortController);\n          }).then(this.onResolve(this.counter)).catch(this.onReject(this.counter));\n        }\n      }\n    }, {\n      key: \"run\",\n      value: function run() {\n        var _this5 = this;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        var deferFn = this.props.deferFn || defaultOptions.deferFn;\n\n        if (deferFn) {\n          this.args = args;\n\n          var props = _objectSpread({}, defaultOptions, {}, this.props);\n\n          return this.start(function () {\n            return deferFn(args, props, _this5.abortController);\n          }).then(this.onResolve(this.counter), this.onReject(this.counter));\n        }\n      }\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var onCancel = this.props.onCancel || defaultOptions.onCancel;\n        onCancel && onCancel();\n        this.counter++;\n        this.abortController.abort();\n        this.mounted && this.dispatch({\n          type: ActionTypes.cancel,\n          meta: this.getMeta()\n        });\n      }\n    }, {\n      key: \"onResolve\",\n      value: function onResolve(counter) {\n        var _this6 = this;\n\n        return function (data) {\n          if (_this6.counter === counter) {\n            var onResolve = _this6.props.onResolve || defaultOptions.onResolve;\n\n            _this6.setData(data, function () {\n              return onResolve && onResolve(data);\n            });\n          }\n\n          return data;\n        };\n      }\n    }, {\n      key: \"onReject\",\n      value: function onReject(counter) {\n        var _this7 = this;\n\n        return function (error) {\n          if (_this7.counter === counter) {\n            var onReject = _this7.props.onReject || defaultOptions.onReject;\n\n            _this7.setError(error, function () {\n              return onReject && onReject(error);\n            });\n          }\n\n          return error;\n        };\n      }\n    }, {\n      key: \"setData\",\n      value: function setData(data, callback) {\n        this.mounted && this.dispatch({\n          type: ActionTypes.fulfill,\n          payload: data,\n          meta: this.getMeta()\n        }, callback);\n        return data;\n      }\n    }, {\n      key: \"setError\",\n      value: function setError(error, callback) {\n        this.mounted && this.dispatch({\n          type: ActionTypes.reject,\n          payload: error,\n          error: true,\n          meta: this.getMeta()\n        }, callback);\n        return error;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            children = _this$props2.children,\n            suspense = _this$props2.suspense;\n\n        if (suspense && this.state.isPending && this.promise !== neverSettle) {\n          // Rely on Suspense to handle the loading state\n          throw this.promise;\n        }\n\n        if (typeof children === \"function\") {\n          var render = children;\n          return React.createElement(Provider, {\n            value: this.state\n          }, render(this.state));\n        }\n\n        if (children !== undefined && children !== null) {\n          return React.createElement(Provider, {\n            value: this.state\n          }, children);\n        }\n\n        return null;\n      }\n    }]);\n\n    return Async;\n  }(React.Component);\n\n  if (propTypes) Async.propTypes = propTypes.Async;\n\n  var AsyncInitial = function AsyncInitial(props) {\n    return React.createElement(Consumer, null, function (st) {\n      return React.createElement(IfInitial, Object.assign({}, props, {\n        state: st\n      }));\n    });\n  };\n\n  var AsyncPending = function AsyncPending(props) {\n    return React.createElement(Consumer, null, function (st) {\n      return React.createElement(IfPending, Object.assign({}, props, {\n        state: st\n      }));\n    });\n  };\n\n  var AsyncFulfilled = function AsyncFulfilled(props) {\n    return React.createElement(Consumer, null, function (st) {\n      return React.createElement(IfFulfilled, Object.assign({}, props, {\n        state: st\n      }));\n    });\n  };\n\n  var AsyncRejected = function AsyncRejected(props) {\n    return React.createElement(Consumer, null, function (st) {\n      return React.createElement(IfRejected, Object.assign({}, props, {\n        state: st\n      }));\n    });\n  };\n\n  var AsyncSettled = function AsyncSettled(props) {\n    return React.createElement(Consumer, null, function (st) {\n      return React.createElement(IfSettled, Object.assign({}, props, {\n        state: st\n      }));\n    });\n  };\n\n  AsyncInitial.displayName = \"\".concat(displayName, \".Initial\");\n  AsyncPending.displayName = \"\".concat(displayName, \".Pending\");\n  AsyncFulfilled.displayName = \"\".concat(displayName, \".Fulfilled\");\n  AsyncRejected.displayName = \"\".concat(displayName, \".Rejected\");\n  AsyncSettled.displayName = \"\".concat(displayName, \".Settled\");\n  return Object.assign(Async, {\n    displayName: displayName,\n    Initial: AsyncInitial,\n    Pending: AsyncPending,\n    Loading: AsyncPending,\n    Fulfilled: AsyncFulfilled,\n    Resolved: AsyncFulfilled,\n    Rejected: AsyncRejected,\n    Settled: AsyncSettled\n  });\n}\n\nvar Async$1 = createInstance();\n\nfunction useAsync(arg1, arg2) {\n  var options = typeof arg1 === \"function\" ? _objectSpread({}, arg2, {\n    promiseFn: arg1\n  }) : arg1;\n  var counter = useRef(0);\n  var isMounted = useRef(true);\n  var lastArgs = useRef(undefined);\n  var lastOptions = useRef(options);\n  var lastPromise = useRef(neverSettle);\n  var abortController = useRef(new MockAbortController());\n  var devToolsDispatcher = globalScope.__REACT_ASYNC__.devToolsDispatcher;\n  var reducer$1 = options.reducer,\n      _options$dispatcher = options.dispatcher,\n      dispatcher = _options$dispatcher === void 0 ? devToolsDispatcher : _options$dispatcher;\n\n  var _useReducer = useReducer(reducer$1 ? function (state, action) {\n    return reducer$1(state, action, reducer);\n  } : reducer, options, init),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      _dispatch = _useReducer2[1];\n\n  var dispatch = useCallback(dispatcher ? function (action) {\n    return dispatcher(action, dispatchMiddleware(_dispatch), lastOptions.current);\n  } : dispatchMiddleware(_dispatch), [dispatcher]);\n  var debugLabel = options.debugLabel;\n  var getMeta = useCallback(function (meta) {\n    return _objectSpread({\n      counter: counter.current,\n      promise: lastPromise.current,\n      debugLabel: debugLabel\n    }, meta);\n  }, [debugLabel]);\n  var setData = useCallback(function (data) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n    if (isMounted.current) {\n      dispatch({\n        type: ActionTypes.fulfill,\n        payload: data,\n        meta: getMeta()\n      });\n      callback();\n    }\n\n    return data;\n  }, [dispatch, getMeta]);\n  var setError = useCallback(function (error) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n    if (isMounted.current) {\n      dispatch({\n        type: ActionTypes.reject,\n        payload: error,\n        error: true,\n        meta: getMeta()\n      });\n      callback();\n    }\n\n    return error;\n  }, [dispatch, getMeta]);\n  var onResolve = options.onResolve,\n      onReject = options.onReject;\n  var handleResolve = useCallback(function (count) {\n    return function (data) {\n      return count === counter.current && setData(data, function () {\n        return onResolve && onResolve(data);\n      });\n    };\n  }, [setData, onResolve]);\n  var handleReject = useCallback(function (count) {\n    return function (err) {\n      return count === counter.current && setError(err, function () {\n        return onReject && onReject(err);\n      });\n    };\n  }, [setError, onReject]);\n  var start = useCallback(function (promiseFn) {\n    if (\"AbortController\" in globalScope) {\n      abortController.current.abort();\n      abortController.current = new globalScope.AbortController();\n    }\n\n    counter.current++;\n    return lastPromise.current = new Promise(function (resolve, reject) {\n      if (!isMounted.current) return;\n\n      var executor = function executor() {\n        return promiseFn().then(resolve, reject);\n      };\n\n      dispatch({\n        type: ActionTypes.start,\n        payload: executor,\n        meta: getMeta()\n      });\n    });\n  }, [dispatch, getMeta]);\n  var promise = options.promise,\n      promiseFn = options.promiseFn,\n      initialValue = options.initialValue;\n  var load = useCallback(function () {\n    var isPreInitialized = initialValue && counter.current === 0;\n\n    if (promise) {\n      start(function () {\n        return promise;\n      }).then(handleResolve(counter.current)).catch(handleReject(counter.current));\n    } else if (promiseFn && !isPreInitialized) {\n      start(function () {\n        return promiseFn(lastOptions.current, abortController.current);\n      }).then(handleResolve(counter.current)).catch(handleReject(counter.current));\n    }\n  }, [start, promise, promiseFn, initialValue, handleResolve, handleReject]);\n  var deferFn = options.deferFn;\n  var run = useCallback(function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    if (deferFn) {\n      lastArgs.current = args;\n      start(function () {\n        return deferFn(args, lastOptions.current, abortController.current);\n      }).then(handleResolve(counter.current)).catch(handleReject(counter.current));\n    }\n  }, [start, deferFn, handleResolve, handleReject]);\n  var reload = useCallback(function () {\n    lastArgs.current ? run.apply(void 0, _toConsumableArray(lastArgs.current)) : load();\n  }, [run, load]);\n  var onCancel = options.onCancel;\n  var cancel = useCallback(function () {\n    onCancel && onCancel();\n    counter.current++;\n    abortController.current.abort();\n    isMounted.current && dispatch({\n      type: ActionTypes.cancel,\n      meta: getMeta()\n    });\n  }, [onCancel, dispatch, getMeta]);\n  /* These effects should only be triggered on changes to specific props */\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  var watch = options.watch,\n      watchFn = options.watchFn;\n  useEffect(function () {\n    if (watchFn && lastOptions.current && watchFn(options, lastOptions.current)) {\n      lastOptions.current = options;\n      load();\n    }\n  });\n  useEffect(function () {\n    lastOptions.current = options;\n  }, [options]);\n  useEffect(function () {\n    if (counter.current) cancel();\n    if (promise || promiseFn) load();\n  }, [promise, promiseFn, watch]);\n  useEffect(function () {\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  useEffect(function () {\n    return function () {\n      return cancel();\n    };\n  }, []);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  useDebugValue(state, function (_ref8) {\n    var status = _ref8.status;\n    return \"[\".concat(counter.current, \"] \").concat(status);\n  });\n\n  if (options.suspense && state.isPending && lastPromise.current !== neverSettle) {\n    // Rely on Suspense to handle the loading state\n    throw lastPromise.current;\n  }\n\n  return useMemo(function () {\n    return _objectSpread({}, state, {\n      run: run,\n      reload: reload,\n      cancel: cancel,\n      setData: setData,\n      setError: setError\n    });\n  }, [state, run, reload, cancel, setData, setError]);\n}\n\nvar FetchError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(FetchError, _Error);\n\n  function FetchError(response) {\n    var _this8;\n\n    _classCallCheck(this, FetchError);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(FetchError).call(this, \"\".concat(response.status, \" \").concat(response.statusText)));\n    _this8.response = response;\n    /* istanbul ignore next */\n\n    if (Object.setPrototypeOf) {\n      // Not available in IE 10, but can be polyfilled\n      Object.setPrototypeOf(_assertThisInitialized(_this8), FetchError.prototype);\n    }\n\n    return _this8;\n  }\n\n  return FetchError;\n}(_wrapNativeSuper(Error));\n\nvar parseResponse = function parseResponse(accept, json) {\n  return function (res) {\n    if (!res.ok) return Promise.reject(new FetchError(res));\n    if (typeof json === \"boolean\") return json ? res.json() : res;\n    return accept === \"application/json\" ? res.json() : res;\n  };\n};\n\nfunction isEvent(e) {\n  return typeof e === \"object\" && \"preventDefault\" in e;\n}\n/**\n *\n * @param {RequestInfo} resource\n * @param {RequestInit} init\n * @param {FetchOptions} options\n * @returns {AsyncState<T, FetchRun<T>>}\n */\n\n\nfunction useAsyncFetch(resource, init) {\n  var _ref9 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      defer = _ref9.defer,\n      json = _ref9.json,\n      options = _objectWithoutProperties(_ref9, [\"defer\", \"json\"]);\n\n  var method = resource.method || init && init.method;\n  var headers = resource.headers || init && init.headers || {};\n  var accept = headers[\"Accept\"] || headers[\"accept\"] || headers.get && headers.get(\"accept\");\n\n  var doFetch = function doFetch(input, init) {\n    return globalScope.fetch(input, init).then(parseResponse(accept, json));\n  };\n\n  var isDefer = typeof defer === \"boolean\" ? defer : [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].indexOf(method) !== -1;\n  var fn = isDefer ? \"deferFn\" : \"promiseFn\";\n  var identity = JSON.stringify({\n    resource: resource,\n    init: init,\n    isDefer: isDefer\n  });\n  var promiseFn = useCallback(function (_, _ref10) {\n    var signal = _ref10.signal;\n    return doFetch(resource, _objectSpread({\n      signal: signal\n    }, init));\n  }, [identity] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var deferFn = useCallback(function (_ref11, _, _ref12) {\n    var _ref13 = _slicedToArray(_ref11, 1),\n        override = _ref13[0];\n\n    var signal = _ref12.signal;\n\n    if (!override || isEvent(override)) {\n      return doFetch(resource, _objectSpread({\n        signal: signal\n      }, init));\n    }\n\n    if (typeof override === \"function\") {\n      var _override = override(_objectSpread({\n        resource: resource,\n        signal: signal\n      }, init)),\n          _runResource = _override.resource,\n          _runInit = _objectWithoutProperties(_override, [\"resource\"]);\n\n      return doFetch(_runResource || resource, _objectSpread({\n        signal: signal\n      }, _runInit));\n    }\n\n    var runResource = override.resource,\n        runInit = _objectWithoutProperties(override, [\"resource\"]);\n\n    return doFetch(runResource || resource, _objectSpread({\n      signal: signal\n    }, init, {}, runInit));\n  }, [identity] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var state = useAsync(_objectSpread({}, options, _defineProperty({}, fn, isDefer ? deferFn : promiseFn)));\n  useDebugValue(state, function (_ref14) {\n    var counter = _ref14.counter,\n        status = _ref14.status;\n    return \"[\".concat(counter, \"] \").concat(status);\n  });\n  return state;\n}\n\nvar unsupported = function unsupported() {\n  throw new Error(\"useAsync requires React v16.8 or up. Upgrade your React version or use the <Async> component instead.\");\n};\n\nvar useAsync$1 = useEffect ? useAsync : unsupported;\nvar useFetch = useEffect ? useAsyncFetch : unsupported;\nexport default Async$1;\nexport { ActionTypes, Async$1 as Async, FetchError, IfFulfilled, IfInitial, IfPending, IfRejected, IfSettled, StatusTypes, createInstance, dispatchMiddleware, globalScope, init, neverSettle, reducer, useAsync$1 as useAsync, useFetch };","map":null,"metadata":{},"sourceType":"module"}